Cahier des Charges 
Marketplace de Jeux Vidéo - GameHaven
1. Présentation du Projet
Nom du projet : GameHaven – Marketplace de Jeux Vidéo
Objectif : Développer une plateforme web pour acheter, vendre et échanger des jeux vidéo (physiques et numériques).
Technologies utilisées : Symfony pour le backend, React pour le frontend, MySQL pour la base de données.
Public cible : Gamers souhaitant vendre des jeux, acheter à bas prix ou échanger leurs collections.
2. Fonctionnalités principales
2.1. Gestion des utilisateurs
- Inscription et connexion sécurisées (Symfony Security).
- Rôles :
  - Utilisateur : Acheter, vendre ou échanger des jeux.
  - Admin : Gérer les annonces et résoudre les conflits.
- Profil utilisateur : Avatar, coordonnées, wishlist, historique des transactions.
2.2. Gestion des annonces
- CRUD des annonces (création, modification, suppression).
- Champs requis : Nom du jeu, plateforme (PC, PS5, Xbox, etc.), état (neuf/occasion), prix, description, image(s).
- Recherche avancée et filtres (par prix, plateforme, état, etc.).
2.3. Achat et panier
- Panier interactif en React pour regrouper les achats.
- Paiement sécurisé (Stripe/PayPal sandbox).
- Suivi des commandes (statut : en attente, payé, livré).
2.4. Système d’échange
- Possibilité d’échanger des jeux entre utilisateurs :
  - Proposer un échange en fonction de leur wishlist.
  - Validation des échanges par les deux parties.
2.5. Avis et évaluations
- Système d’évaluation des utilisateurs (5 étoiles, commentaires).
- Notes globales pour les vendeurs pour établir la confiance.
2.6. Notifications et Wishlist
- Notifications :
  - Nouveaux jeux correspondant à la wishlist.
  - Promotions ou réductions.
- Wishlist pour sauvegarder les jeux souhaités.
2.7. Tableau de bord Admin
- Gestion des utilisateurs : Activer/désactiver des comptes, Gérer les litiges.
- Validation et modération des annonces.
- Génération de statistiques (ventes, utilisateurs actifs).
3. Contraintes techniques
- Backend : Symfony
  - Gestion des API pour les annonces, utilisateurs et transactions.
  - Utilisation des bundles comme FosRestBundle pour les endpoints API.
- Frontend : React
  - Interface utilisateur dynamique.
  - Bibliothèques : React Router, Axios, Material-UI/Bootstrap.
- Base de données : MySQL
  - Tables pour les utilisateurs, annonces, transactions, wishlist, etc.
- Sécurité :
  - Authentification par JWT (JSON Web Tokens).
  - Chiffrement des mots de passe avec Symfony Security.
- Paiement : Intégration Stripe ou PayPal (sandbox).
4. Livrables
1. Maquette UX/UI : Design des pages principales (React).
2. Base de données : Modèle conceptuel et logique des données.
3. API : Documentation des endpoints backend.
4. Application fonctionnelle : Frontend + Backend intégrés.
5. Rapport technique : Documentation de l’architecture et des choix techniques.
5. Délais et Planning
-  1 : Analyse des besoins, création des maquettes. Mise en place de la base de données et des modèles Symfony.
- 2 : Développement des fonctionnalités backend (API pour utilisateurs et annonces). Création des interfaces React (liste des jeux, profils utilisateurs).
- 3 : Intégration des fonctionnalités de panier et de paiement. Mise en place du système d’échange.
- 4 : Tableau de bord Admin. Tests, débogage et optimisation.
- 5 : Finalisation, déploiement et rédaction du rapport.